@using homepage.ViewModel
@using homepage.Models
@if (Session[CDictionary.SK_ActiveRoleId] == null)
{
    Session[CDictionary.SK_ActiveRoleId] = 3;
}
<!DOCTYPE html>
<html lang="zh-hant">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    @*mapbox*@
    <script src="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css" rel="stylesheet" />
    @*mapbox plugins directions*@
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.js"></script>
    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.css" type="text/css" />
    @*mapbox plugins language*@
    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-language/v0.10.1/mapbox-gl-language.js'></script>
    @*sweet alert cdn _verna_0930*@
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />


    @*ajax*@
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css">
    <script src="//code.jquery.com/jquery-1.12.4.js"></script>
    <script src="//code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <link href="~/css/Game.css" rel="stylesheet" />

</head>
<body>
    @*Navbar*@
    <nav class="navbar navbar-inverse">
        <div class="container-fluid">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="#">FunDayTrip 探索遊戲</a>
            </div>
            <div class="collapse navbar-collapse" id="myNavbar">
                <ul class="nav navbar-nav" style="display:none">
                    <!-- <li class="active"><a href="#">Home</a></li>
                    <li class="dropdown" >
                      <a class="dropdown-toggle" data-toggle="dropdown" href="#">Page 1 <span class="caret"></span></a>
                      <ul class="dropdown-menu">
                        <li><a href="#">Page 1-1</a></li>
                        <li><a href="#">Page 1-2</a></li>
                        <li><a href="#">Page 1-3</a></li>
                      </ul>
                    </li>
                    <li><a href="#">Page 2</a></li>
                    <li><a href="#">Page 3</a></li> -->
                </ul>
                <ul class="nav navbar-nav navbar-right">
                    <li>
                        <a href="javascript:showResponse()"><span class="glyphicon glyphicon-user"></span> @Session[CDictionary.SK_ActiveRoleName]</a>
                    </li>
                    @*<li><a href="#"><span class="glyphicon glyphicon-log-in"></span> Login</a></li>*@
                    <li>
                        <a href="javascript:exitGame()"><span class="glyphicon glyphicon-remove"></span>退出遊戲</a>
                    </li>

                </ul>
            </div>
        </div>
    </nav>

    @*地圖內容*@
    <div id="map" class="map"></div>

    @*遊戲框*@
    <div id="game_modal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div style="justify-content:center;">
                <div id="playing_game"></div>
            </div>
        </div>
    </div>
    @*遊戲框*@

    @*內容框*@
    <div id="foot-content" class="footer">
        <div id="now_play" value="-1" style="display:none"></div>
        <div id="content-toggle" class="toggleUp">
            <span id="content-icon" class="glyphicon glyphicon-chevron-up"></span>
        </div>
        <div id="current_position" value="">目前位置:</div>
        <div id="inner_content" value="">

        </div>
    </div>


    <script>
            var now_x = 0;
            var now_y = 0;
        //目前位置
        //$("#reposition").on("click", position_now);
        function position_now() {
            navigator.geolocation.getCurrentPosition(function (position) {
                let x = position.coords.longitude;
                let y = position.coords.latitude;
                $("#current_position").html("目前位置: " + x.toFixed(6) + ", " + y.toFixed(6));
                now_x = x;
                now_y = y;
            });
            };
            position_now();

        //地圖初始化==========================
        mapboxgl.accessToken = 'pk.eyJ1IjoicGVhY2V3YW5nIiwiYSI6ImNrZmx6YWl6cTB6YWcyd21xMzFqNTZ5YzYifQ.WxjLSvp5k6yCWELcbMWeMw';
        //顯示中文地圖
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v10',
            center: [121.5173115, 25.045181],
            zoom: 11
        });
        var language = new MapboxLanguage({ defaultLanguage: 'zh' });
        map.addControl(language);

        //===================================
        //地點所有資訊組成json，顯示在地圖
        function displayAllRoutes() {
            var groupArray = [];
            var response = getGameGroup();
            for (var i = 0; i < response.length; i++) {
                console.log(response);
                var Name_Group = response[i].fGroup_GameNav.fName_GameGroup;
                var Description_Group = response[i].fGroup_GameNav.fDescription_GameGroup;
                var Coords_Group = [response[i].fItems_GameNav[0].fX_Coordinate, response[i].fItems_GameNav[0].fY_Coordinate];
                var Id_Group = response[i].fGroup_GameNav.fId_GameGroup;
                var Route_Group = response[i].fGroup_GameNav.fId_Route;
                var Photo_Group = response[i].fGroup_GameNav.fPhoto_GameGroup;

                groupJson =
                    {
                    'type': 'Feature',
                        'properties': {
                            'groupId': Id_Group,
                            'photo': Photo_Group,
                            'description': '<strong>' + Name_Group + '</strong><p>' + Description_Group + '</p>'
                        },
                        'geometry': {
                            'type': 'Point',
                            'coordinates': Coords_Group
                        }
                    };
                groupArray.push(groupJson);
            };
            //地圖載入
            map.on("load", function () {
                //地點加入地圖====================
                map.loadImage(
                'https://docs.mapbox.com/mapbox-gl-js/assets/custom_marker.png',
                function (error, image) {
                    if (error) throw error;
                    map.addImage('custom-marker', image);

                    map.addSource('game_group', {
                        'type': 'geojson',
                        'data': {
                            'type': 'FeatureCollection',
                            'features': groupArray
                        }
                    });//End：map.addSource

                    map.addLayer({
                        'id': 'game_group',
                        'type': 'symbol',
                        'source': 'game_group',
                        'layout': {
                            'icon-image': 'custom-marker',
                            'icon-allow-overlap': true
                        }
                    });//End：map.addLayer


                });
            geolocate.trigger();
        });
        };

        displayAllRoutes();

            //====================

            function fly(Point) {
                map.flyTo({
                    center: [Point[0], Point[1] - 0.001], // [X,Y] Array
                    essential: true,
                    zoom: 17
                })
            };

            function GetRoutePathArray(RouteInnerHTMLPath) {
                var RoutePath = new Array();
                var tempPoint = new Array();
                var strRoutePath = (RouteInnerHTMLPath + "").split(',');
                for (var i = 0; i < strRoutePath.length; i += 2) {
                    tempPoint[i / 2] = new Array();
                    tempPoint[i / 2][1] = strRoutePath[i + 1];
                    tempPoint[i / 2][0] = strRoutePath[i];
                    RoutePath.push(tempPoint[i / 2]);
                }
                return RoutePath;
            }

            //使用者定位
            var geolocate = new mapboxgl.GeolocateControl({
                positionOptions: {
                    enableHighAccuracy: true
                },
                trackUserLocation: true
            });
            // Add the control to the map.
            map.addControl(geolocate);

            //點擊遊戲圖標
        map.on('click', 'game_group', function (e) {

                var coordinates = e.features[0].geometry.coordinates.slice();
                var description = e.features[0].properties.description;
                var group_id = e.features[0].properties.groupId;
                var photo = e.features[0].properties.photo;
                position_now();
                var userPosition = [now_x, now_y];
                // Ensure that if the map is zoomed out such that multiple
                // copies of the feature are visible, the popup appears
                // over the copy being pointed to.
                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                }
                _fX_Coordinate = coordinates[0];
                _fY_Coordinate = coordinates[1];
            Coords_Location = [_fX_Coordinate, _fY_Coordinate];

            let toShowContentObj = {
                group_id: group_id,
                end: coordinates,
                descript: description,
                photo: photo,
            };

            showContent(toShowContentObj);

                fly(Coords_Location);
            });

            // Change the cursor to a pointer when the mouse is over the places layer.
            map.on('mouseenter', 'game_group', function () {
                map.getCanvas().style.cursor = 'pointer';
            });

            // Change it back to a pointer when it leaves.
            map.on('mouseleave', 'game_group', function  () {
                map.getCanvas().style.cursor = '';
            });

            //show 地點路線
            function showGameItems(id) {
                if (map.getSource('game_items')) {
                    map.removeLayer('game_items');
                    map.removeSource('game_items');
                };

                var gamegroup = { group_id: id, role_id: @Session[CDictionary.SK_ActiveRoleId] };


                var response = getGameRecord(gamegroup);
                let itemArray = [];
                for (var j = response.fStatus_GameNav; j < response.fItems_GameNav.length; j++) {
                    let Name_Item = response.fItems_GameNav[j].fName_Game;
                    let Coords_Item = [response.fItems_GameNav[j].fX_Coordinate, response.fItems_GameNav[j].fY_Coordinate];
                    let Id_Item = response.fItems_GameNav[j].fId_GameGroup;
                    itemJson =
                    {
                        'type': 'Feature',
                        'properties': {
                            'groupId': Id_Item,
                            'description': Name_Item
                        },
                        'geometry': {
                            'type': 'Point',
                            'coordinates': Coords_Item
                        }
                    };
                    itemArray.push(itemJson);
                }
                map.addSource('game_items', {
                    'type': 'geojson',
                    'data': {
                        'type': 'FeatureCollection',
                        'features': itemArray
                    }
                });//End：map.addSource
                map.addLayer({
                    'id': 'game_items',
                    'type': 'symbol',
                    'source': 'game_items',
                    'layout': {
                        'icon-image': 'custom-marker',
                        'icon-allow-overlap': true
                    }
                });
            }

        //內容框上拉
        function content_up(){
            $("#foot-content").toggleClass("footer_withcontent", 1000, "swing", function () {
                $("#content-icon").toggleClass("glyphicon-chevron-down", 1500, "swing");
            });
        };

        $("#foot-content").on("click", function () {
            $(this).toggleClass("footer_withcontent", 1000, "swing", function () {
                $("#content-icon").toggleClass("glyphicon-chevron-down", 1500, "swing");
            });
        });

            function showContent(obj) {
                $("#foot-content").toggleClass("footer_withcontent", 1000, "swing", function () {
                    $("#content-icon").toggleClass("glyphicon-chevron-down", 1500, "swing");
                });

                var start = [now_x, now_y];
                //導引使用者到該地點
                var reqRecord = { group_id: obj.group_id, role_id:@Session[CDictionary.SK_ActiveRoleId] }
                var record = getGameRecord(reqRecord);

                    let url = 'https://api.mapbox.com/directions/v5/mapbox/walking/' + start[0] + ',' + start[1] + ';' + obj.end[0] + ',' + obj.end[1] + '?steps=false&geometries=geojson&access_token=' + mapboxgl.accessToken;
                    var req = new XMLHttpRequest();

                    req.open('GET', url, true);
                req.onload = function () {
                        var json = JSON.parse(req.response);
                        var data = json.routes[0];
                        var route = data.geometry.coordinates;
                        var distance = data.distance;
                        var duration = data.duration;
                        console.log(distance + "," + duration)

                    var content = "您與該點距離: " + (distance / 1000).toFixed(1) + "公里, 步行時間: " + (duration / 60).toFixed(1) + "分鐘<br>";
                    content += obj.end + "<br>" + obj.descript + "<br>";
                    content += "<div>已遊玩至第" + record.fStatus_GameNav + "點</div>"
                    content += "<img src='" + obj.photo + "' / >";
                        content += "<button value='" + obj.group_id + "' onclick='beginGame(this)'> 開始遊戲 </button>";
                    $("#inner_content").html(content);

                        var geojson = {
                        type: 'Feature',
                        properties: {},
                        geometry: {
                        type: 'LineString',
                            coordinates: route
                        }
                    };

                    // if the route already exists on the map, reset it using setData
                    if (map.getSource('route')) {
                        map.getSource('route').setData(geojson);
                } else { // otherwise, make a new request
                    map.addLayer({
                    id: 'route',
                            type: 'line',
                            source: {
                        type: 'geojson',
                                data: {
                            type: 'Feature',
                                    properties: {},
                                    geometry: {
                                type: 'LineString',
                                        coordinates: geojson
                                    }
                            }
                        },
                            layout: {
                            'line-join': 'round',
                                'line-cap': 'round'
                            },
                            paint: {
                            'line-color': '#3887be',
                                'line-width': 5,
                                'line-opacity': 0.75
                            }
                    });
                    map.getSource('route').setData(geojson);

                }
                    // add turn instructions here at the end
                };
                req.send();

            };
                //開始遊戲
                function beginGame(obj) {
                    showGameItems(obj.value);
                    map.setLayoutProperty('game_group', 'visibility', 'none');
                    var userPosition = [now_x, now_y];
                    var toRecordObj = {
                group_id: obj.value,
                role_id: @Session[CDictionary.SK_ActiveRoleId], //記得改成Session的role_id
            };

                var response = getGameRecord(toRecordObj)

            var order = response.fStatus_GameNav;
                var game_id = response.fItems_GameNav[order].fId_Game;
                var end = [response.fItems_GameNav[order].fX_Coordinate, response.fItems_GameNav[order].fY_Coordinate];
                var name = response.fItems_GameNav[order].fName_Game;

                var toGuideObj = {
                    game_id: game_id,
                    end: end,
                    name: name
                };

                guideRoute(toGuideObj);
            $("#now_play").attr("value",obj.value);
        };


                //遊戲進行導引路線
                function guideRoute(obj) {
                    //導引下個地點
                    var start = [now_x, now_y];

                    let url = 'https://api.mapbox.com/directions/v5/mapbox/walking/' + start[0] + ',' + start[1] + ';' + obj.end[0] + ',' + obj.end[1] + '?steps=false&geometries=geojson&access_token=' + mapboxgl.accessToken;
                    var req = new XMLHttpRequest();


                    req.open('GET', url, true);
                    req.onload = function () {
                        var json = JSON.parse(req.response);
                        var data = json.routes[0];
                        var route = data.geometry.coordinates;
                        var distance = data.distance;
                        var duration = data.duration;
                        console.log(distance + "," + duration)

                var content = "您與該點距離: " + (distance / 1000).toFixed(1) + "公里, 步行時間: " + (duration / 60).toFixed(1) + "分鐘<br>";
                        content += obj.end;
                        content += "<br>" + obj.name + "<br>";
                        //content += "<img src='" + photo + "' / >";
                        content += "<button value='" + obj.game_id + "' onclick='enterGame(this)'> 進入 </button>";
                        content += "<input id='distance' value='" + distance + "' style='display:none'>";
                $("#inner_content").html(content);

                        var geojson = {
                    type: 'Feature',
                    properties: {},
                    geometry: {
                type: 'LineString',
                        coordinates: route
                    }
                };

                // if the route already exists on the map, reset it using setData
                if (map.getSource('route')) {
                    map.getSource('route').setData(geojson);
                } else { // otherwise, make a new request
                    map.addLayer({
                    id: 'route',
                        type: 'line',
                        source: {
                        type: 'geojson',
                            data: {
                            type: 'Feature',
                                properties: {},
                                geometry: {
                                type: 'LineString',
                                    coordinates: geojson
                                }
                            }
                        },
                        layout: {
                            'line-join': 'round',
                            'line-cap': 'round'
                        },
                        paint: {
                            'line-color': '#3887be',
                            'line-width': 5,
                            'line-opacity': 0.75
                        }
                    });
                    map.getSource('route').setData(geojson);

                }
                // add turn instructions here at the end
            };
                req.send();

        };
                function enterGame(game_id) {

                    var role_id = @Session[CDictionary.SK_ActiveRoleId];//記得改回Session Role Id

                    var group_id = $("#now_play").attr("value");

                    var toRecordObj = {
                group_id: group_id,
                role_id: @Session[CDictionary.SK_ActiveRoleId], //記得改成Session的role_id
            };

                var distance = $("#distance").val();

                if (distance > 1000000) {
                    Swal.fire({
                    title: "尚未到達目的地",
                    showClass: {
                        popup: 'animate__animated animate__fadeInDown'
                    },
                    hideClass: {
                        popup: 'animate__animated animate__fadeOutUp'
                    }
                    });
                } else {

                    var response = getGameRecord(toRecordObj);

                    var order = response.fStatus_GameNav;
                    var game_id = response.fItems_GameNav[order].fId_Game;
                    var end = [response.fItems_GameNav[order].fX_Coordinate, response.fItems_GameNav[order].fY_Coordinate];
                    var img = response.fItems_GameNav[order].fSource_Game;

                    if (response.fItems_GameNav[order].fType_Game == 1) {
                        var title = response.fItems_GameNav[order].cGamesteps.fTitle_GameStep;
                        var content = response.fItems_GameNav[order].cGamesteps.fContent_GameStep;
                        //var play = "<h3>" + title + "</h3>";
                        //play += "<div>" + content + "</div>";
                        //play += '<button class="btn btn-info"';
                        //play += 'onclick="finishItem(' + response.fItems_GameNav[order].fOrder_Game + ')" ';
                        //play += 'type = "submit" >確定</button > ';
                        Swal.fire({
                            title: title,
                            text: content,
                            imageUrl: img,
                            imageWidth: 400,
                            imageAlt: '踩點遊戲',
                            showCancelButton: true,
                            confirmButtonText: '確定',
                            cancelButtonText: '取消',
                        }).then((result) => {
                            if (result.isConfirmed) {
                                Swal.fire(
                                    '完成!',
                                    '',
                                    'success'
                                );
                                finishItem(response.fItems_GameNav[order].fOrder_Game);
                            }
                        });

                    } else if (response.fItems_GameNav[order].fType_Game == 2) {
                        var question = response.fItems_GameNav[order].cGameQA.fQuestion_GameQA;
                        var op1 = response.fItems_GameNav[order].cGameQA.fOption_1_GameQA;
                        var op2 = response.fItems_GameNav[order].cGameQA.fOption_2_GameQA;
                        var op3 = response.fItems_GameNav[order].cGameQA.fOption_3_GameQA;
                        var op4 = response.fItems_GameNav[order].cGameQA.fOption_4_GameQA;

                        let inputOptions = new Promise((resolve) => {
                            setTimeout(() => {
                                resolve({
                                    '1': op1,
                                    '2': op2,
                                    '3': op3,
                                    '4': op4
                                })
                            }, 1000)
                        });

                        let { value: answer } = Swal.fire({
                            title: question,
                            imageUrl: img,
                            imageWidth: 400,
                            text: '請選擇答案',
                            input: 'radio',
                            confirmButtonText: '確定',
                            inputOptions: inputOptions,
                            inputValidator: (value) => {
                                if (!value) {
                                    return '請選擇一個答案!'
                                }
                            }
                        });

                        if (answer) {
                            checkQA(game_id, answer);

                        }
                        //var play = "<form><h3>" + question + "</h3>";
                        //play += "<input type='radio' name='options' value='1'>" + op1;
                        //play += "<input type='radio' name='options' value='2'>" + op2;
                        //play += "<input type='radio' name='options' value='3'>" + op3;
                        //play += "<input type='radio' name='options' value='4'>" + op4;
                        //play += "</form>"

                }


                //    play += '<button class="btn btn-info" onclick="gameconClose()" type="submit">取消</button>';

                //$("#playing_game").html(play);
                    //gamecon();
                }
        };

        function finishItem(now_play) {
            //得到目前遊玩的group
            var now_play_group = $("#now_play").attr("value");
            var next_play = now_play;
            //更新資料
            var response = $.ajax({
                url: "@Url.Action("put","Game")",
                async: false,
                type: "POST",
                dataType: "json",
                data: {
                    group_id: now_play_group,
                    role_id:@Session[CDictionary.SK_ActiveRoleId],
                    finish: now_play
                }
            }).done(function (response) {
                console.log(response)
            }).fail(function (xhr) {
                console.log(xhr.status + xhr.responseText);
            }).responseJSON;

            var nextGame = response.fItems_GameNav[next_play].fId_Game;
            var nextPoint = [response.fItems_GameNav[next_play].fX_Coordinate, response.fItems_GameNav[next_play].fY_Coordinate];
            var nextName = response.fItems_GameNav[next_play].fName_Game;
            //導去下一個點
            var toGuideObj = {
                game_id: nextGame,
                end: nextPoint,
                name: nextName
            };

            guideRoute(toGuideObj);
        };


        function exitGame() {
                    map.setLayoutProperty('game_group', 'visibility', 'visible');
                    map.setLayoutProperty('game_items', 'visibility', 'none');

                };


        function getGameGroup() {
                    return $.ajax({
                    url: "@Url.Action("get","Game")",
                async: false,
                type: "GET",
                dataType: "json",
            }).done(function (response) {
                }).fail(function (xhr) {
                    console.log(xhr.status + xhr.responseText);
                }).responseJSON;
        };

        function getGameRecord(obj) {
                    return $.ajax({
                    url: "@Url.Action("post","Game")",
                async: false,
                type: "POST",
                dataType: "json",
                data: { group_id: obj.group_id, role_id: obj.role_id }
                    }).done(function (response) {
                }).fail(function (xhr) {
                    console.log(xhr.status + xhr.responseText);
                }).responseJSON;
        };

        function checkQA(game_id, answer) {
            return $.ajax({
                    url: "@Url.Action("get","Game")",
                async: false,
                type: "GET",
                dataType: "json",
                data: { game_id: game_id, answer: answer}
            }).done(function (response) {
                console.log(response);
                }).fail(function (xhr) {
                    console.log(xhr.status + xhr.responseText);
                }).responseJSON;
        };

        function showResponse() {
            var response = getGameGroup();
            console.log($("#now_play").attr("value"));
        };



    </script>

</body>
</html>