@using homepage.ViewModel
@using homepage.Models
@if (Session[CDictionary.SK_ActiveRoleId] == null)
{
    Session[CDictionary.SK_ActiveRoleId] = 3;
}
<!DOCTYPE html>
<html lang="zh-hant">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">

    @*mapbox*@
    <script src="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v1.12.0/mapbox-gl.css" rel="stylesheet" />
    @*mapbox plugins directions*@
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.js"></script>
    <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.css" type="text/css" />
    @*mapbox plugins language*@
    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-language/v0.10.1/mapbox-gl-language.js'></script>
    @*sweet alert cdn _verna_0930*@
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />



    @*ajax*@
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css">
    <script src="//code.jquery.com/jquery-1.12.4.js"></script>
    <script src="//code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <link href="~/css/Game.css" rel="stylesheet" />
    @*signalR*@
    <script src="~/Scripts/jquery.signalR-2.4.1.js"></script>
    <script src="~/signalr/hubs"></script>

    @*AR.JS & A-Frame*@
    <!--<script src="https://aframe.io/releases/1.0.4/aframe.min.js"></script>
    <script src="https://unpkg.com/aframe-look-at-component@0.8.0/dist/aframe-look-at-component.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar-nft.js"></script>
    <script src="https://raw.githack.com/donmccurdy/aframe-extras/master/dist/aframe-extras.loaders.min.js"></script>-->
    <!-- This is a hack because at the time of writing there are some distortions in the provided visuals until the -->
    <!-- system receives a resize event. The resize event must be triggered when everything has been loaded and the -->
    <!-- camera has been initialized. All the events I tried didn't work, so in the end I resorted using a 3 seconds -->
    <!-- time-out after the load event. When this problem will be fixed in the AR.js library, this hack won't be necessary -->
    <!-- anymore -->
    @*<script>
            window.onload = function () {
                setTimeout(function () {
                    var resizeEvent = window.document.createEvent('UIEvents');
                    resizeEvent.initUIEvent('resize', true, false, window, 0);
                    window.dispatchEvent(resizeEvent);
                }, 3000);
            };
        </script>*@
    <style>


    </style>

</head>
<body>
    @*Navbar*@
    <nav class="navbar navbar-inverse">
        <div class="container-fluid" style="background-color:#1C558E;">
            <div class="navbar-header" style="color: #fdca40">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="javascript:void(0)" style="font-family: Impact; font-size: 24px; color:#fdca40;">FunDayTrip 探索遊戲</a>
            </div>
            <div class="collapse navbar-collapse" id="myNavbar">
                <ul class="nav navbar-nav" style="display:none">
                    <!-- <li class="active"><a href="#">Home</a></li>
                    <li class="dropdown" >
                      <a class="dropdown-toggle" data-toggle="dropdown" href="#">Page 1 <span class="caret"></span></a>
                      <ul class="dropdown-menu">
                        <li><a href="#">Page 1-1</a></li>
                        <li><a href="#">Page 1-2</a></li>
                        <li><a href="#">Page 1-3</a></li>
                      </ul>
                    </li>
                    <li><a href="#">Page 2</a></li>
                    <li><a href="#">Page 3</a></li> -->
                </ul>
                <ul class="nav navbar-nav navbar-right">
                    <li>
                        <a href="javascript:void(0)"><span class="glyphicon glyphicon-user"></span> @Session[CDictionary.SK_ActiveRoleName]</a>
                    </li>
                    @*<li><a href="#"><span class="glyphicon glyphicon-log-in"></span> Login</a></li>*@
                    <li>
                        <a href="javascript:forDemo()"><span class="glyphicon glyphicon-refresh"></span>Demo</a>
                    </li>
                    <li>
                        <a href="javascript:exitGame()"><span class="glyphicon glyphicon-remove"></span>退出遊戲</a>
                    </li>

                </ul>
            </div>
        </div>
    </nav>

    @*地圖內容*@
    <div id="map" class="map"></div>

    @*內容框*@
<div id="foot-content" class="footer">
    <div id="now_play" name="group_name" value="-1" style="display:none"></div>
    <div id="content-toggle" class="toggleUp row">
        <span class="col-xs-3"></span>
        <span id="content-icon" class="glyphicon glyphicon-chevron-up col-xs-6" style="color: #1C558E;font-size:16px;">
            <br />
            <span id="current_position" value="" style="display:none"></span>
        </span>
        <span class="col-xs-3"></span>
    </div>
    <div id="inner_content" class="container-fluid">
        <div class="row" style="height:5%"></div>
        <div class="row">
            <div class="col-xs-6" id="distance"></div>
            <div class="col-xs-6" id="duration"></div>
        </div>
        <div class="row" style="height:10%"></div>
        <div class="row main_content" >
            <span class="col-xs-6" style="text-align:center">                
                <img id="game_photo" src="" />
            </span>
            <div class="col-xs-6" id="other_content">
                <div id="group_title" style="text-align:center;font-size:18px;font-weight:bold"></div>
                <div id="group_descript" style="text-align:center;font-size:14px" class="detail"></div>
            </div>
        </div>
        <div style="height:15%"></div>
        <div id="other_info" class="row" style="bottom:0px;font-size:14px;text-align:center;">
            <div class="col-xs-6">
                <div id="info_icon" class="glyphicon glyphicon-info-sign"> </div>
                <div id="play_count" class="detail"></div>
            </div>
            <div class="col-xs-6">
                <div id="group_points" class="detail"></div>
                <div id="play_status" class="detail"></div>
            </div>
        </div>
    </div>
    <div class="container enter_button">
        <input id="play_group" name="group_name" value="-1" style="display:none"/>
        <input id="play_game" name="game_name" value="-1" style="display:none"/>
        <a id="enter_game" href="" class="btn btn-primary btn-block" style="font-size:24px" >GO</a>
    </div>
</div>

    <script>        
        const role_id = @Session[CDictionary.SK_ActiveRoleId];
        var now_x = 0;
        var now_y = 0;
        var trigger_distance = 100;

        //更新並追蹤使用者定位，變更導航
        var trackLocation, targetEnd, trackOptions, position_now;
        var trackToRefresh = false; //更新開關


        function trackOK(pos) {
            var crd = pos.coords;
            now_x = pos.coords.longitude;
            now_y = pos.coords.latitude;
            console.log([now_x, now_y]); 

            var obj = {
                start: [now_x, now_y],
                end: targetEnd,
                }

            if (trackToRefresh == true) {
                console.log(obj);
                routeFresh(obj);
            } else {
                console.log(obj);
            }
        }

        function trackFail(err) {
            console.warn('ERROR(' + err.code + '): ' + err.message);
        }


        targetEnd = [0,0];

        trackOptions = {
            enableHighAccuracy: false,
            timeout: 5000,
            maximumAge: 0
        };

        trackLocation = navigator.geolocation.watchPosition(trackOK, trackFail, trackOptions);

        //var position_now = setInterval(function () {
        //    navigator.geolocation.watchPosition(function (position) {
        //        let x = position.coords.longitude;
        //        let y = position.coords.latitude;
        //        $("#current_position").attr("value", [x.toFixed(6), y.toFixed(6)]);
        //        now_x = x;
        //        now_y = y;
        //        console.log("目前座標:"+[now_x, now_y]);
        //    });
        //}, 3000);


        //地圖初始化==========================
        mapboxgl.accessToken = 'pk.eyJ1IjoicGVhY2V3YW5nIiwiYSI6ImNrZmx6YWl6cTB6YWcyd21xMzFqNTZ5YzYifQ.WxjLSvp5k6yCWELcbMWeMw';
        //顯示中文地圖
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v10',
            center: [121.5173115, 25.045181],
            zoom: 11
        });
        var language = new MapboxLanguage({ defaultLanguage: 'zh' });
        map.addControl(language);

        //===================================
        //地點所有資訊組成json，顯示在地圖
        function displayAllRoutes() {
            var groupArray = [];
            var response = getGameGroup();
            for (var i = 0; i < response.length; i++) {
                console.log(response);
                var Name_Group = response[i].fGroup_GameNav.fName_GameGroup;
                var Description_Group = response[i].fGroup_GameNav.fDescription_GameGroup;
                var Coords_Group = [response[i].fItems_GameNav[0].fX_Coordinate, response[i].fItems_GameNav[0].fY_Coordinate];
                var Id_Group = response[i].fGroup_GameNav.fId_GameGroup;
                var Route_Group = response[i].fGroup_GameNav.fId_Route;
                var Photo_Group = response[i].fGroup_GameNav.fPhoto_GameGroup;
                var Count_Group = response[i].fItems_GameNav.length;
                groupJson =
                    {
                    'type': 'Feature',
                        'properties': {
                            'groupId': Id_Group,
                            'group_name': Name_Group,
                            'photo': Photo_Group,
                            'count': Count_Group,
                            'description': Description_Group
                        },
                        'geometry': {
                            'type': 'Point',
                            'coordinates': Coords_Group
                        }
                    };
                groupArray.push(groupJson);
            };
            //地圖載入
            map.on("load", function () {
                //地點加入地圖====================
                map.loadImage(
                    '../Content/game_icon.png',
                function (error, image) {
                    if (error) throw error;
                    map.addImage('custom-marker', image);

                    map.addSource('game_group', {
                        'type': 'geojson',
                        'data': {
                            'type': 'FeatureCollection',
                            'features': groupArray
                        }
                    });//End：map.addSource

                    map.addLayer({
                        'id': 'game_group',
                        'type': 'symbol',
                        'source': 'game_group',
                        'layout': {
                            'icon-image': 'custom-marker',
                            'icon-allow-overlap': true
                        }
                    });//End：map.addLayer


                });
                geolocate.trigger();
                geolocate.on('geolocate', function (data) {
                    now_x = data.coords.longitude;
                    now_y = data.coords.latitude;
                    $("#current_position").attr("value",now_x.toFixed(4) + ", " + now_y.toFixed(4));
                });
        });
        };

        displayAllRoutes();

            //====================

            function fly(Point) {
                map.flyTo({
                    center: [Point[0], Point[1] - 0.001], // [X,Y] Array
                    essential: true,
                    zoom: 17
                })
            };

            function GetRoutePathArray(RouteInnerHTMLPath) {
                var RoutePath = new Array();
                var tempPoint = new Array();
                var strRoutePath = (RouteInnerHTMLPath + "").split(',');
                for (var i = 0; i < strRoutePath.length; i += 2) {
                    tempPoint[i / 2] = new Array();
                    tempPoint[i / 2][1] = strRoutePath[i + 1];
                    tempPoint[i / 2][0] = strRoutePath[i];
                    RoutePath.push(tempPoint[i / 2]);
                }
                return RoutePath;
            }

            //使用者定位
            var geolocate = new mapboxgl.GeolocateControl({
                positionOptions: {
                    enableHighAccuracy: true
                },
                trackUserLocation: true
            });
            // Add the control to the map.
            map.addControl(geolocate);

            //點擊遊戲群組圖標
        map.on('click', 'game_group', function (e) {
            var coordinates = e.features[0].geometry.coordinates.slice();
            var group_name = e.features[0].properties.group_name;
            var description = e.features[0].properties.description;
            var group_id = e.features[0].properties.groupId;
            var photo = e.features[0].properties.photo;
            var count = e.features[0].properties.count;

                var userPosition = [now_x, now_y];
                // Ensure that if the map is zoomed out such that multiple
                // copies of the feature are visible, the popup appears
                // over the copy being pointed to.
                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                }
                _fX_Coordinate = coordinates[0];
                _fY_Coordinate = coordinates[1];
            Coords_Location = [_fX_Coordinate, _fY_Coordinate];

            let toShowContentObj = {
                group_id: group_id,
                group_name: group_name,
                end: coordinates,
                descript: description,
                photo: photo,
                count: count
            };

            showContent(toShowContentObj);

                fly(Coords_Location);
            });

            // Change the cursor to a pointer when the mouse is over the places layer.
            map.on('mouseenter', 'game_group', function () {
                map.getCanvas().style.cursor = 'pointer';
            });

            // Change it back to a pointer when it leaves.
            map.on('mouseleave', 'game_group', function  () {
                map.getCanvas().style.cursor = '';
            });

            //show 地點路線
        function showGameItems(id) {
            var gamegroup = { group_id: id, role_id: @Session[CDictionary.SK_ActiveRoleId] };
            var response = getGameRecord(gamegroup);
            var itemArray = {
                    'type': 'FeatureCollection',
                'features': []
            };

                for (var j = response.fStatus_GameNav; j < response.fItems_GameNav.length; j++) {
                    let Name_Item = response.fItems_GameNav[j].fName_Game;
                    let Coords_Item = [response.fItems_GameNav[j].fX_Coordinate, response.fItems_GameNav[j].fY_Coordinate];
                    let Id_Item = response.fItems_GameNav[j].fId_GameGroup;
                    itemJson =
                    {
                        'type': 'Feature',
                        'properties': {
                            'groupId': Id_Item,
                            'description': Name_Item
                        },
                        'geometry': {
                            'type': 'Point',
                            'coordinates': Coords_Item
                        }
                    };
                    itemArray.features.push(itemJson);
                }

            if (map.getSource('game_items')) {
                map.getSource('game_items').setData(itemArray);
            } else {
                itemArray
                map.addSource('game_items', {
                    'type': 'geojson',
                    'data': itemArray
                });//End：map.addSource
                map.addLayer({
                    'id': 'game_items',
                    'type': 'symbol',
                    'source': 'game_items',
                    'layout': {
                        'icon-image': 'custom-marker',
                        'icon-allow-overlap': true
                    }
                });
            }
            map.setLayoutProperty('game_items', 'visibility', 'visible');
        }

        //內容框上拉
        function content_up(){
            $("#foot-content").toggleClass("footer_withcontent", 1000, "swing", function () {
                $("#content-icon").toggleClass("glyphicon-chevron-down", 1500, "swing");
            });

        };

        $("#foot-content").on("click", function () {
            $(this).toggleClass("footer_withcontent", 1000, "swing", function () {
                $("#content-icon").toggleClass("glyphicon-chevron-down", 1500, "swing");
            });
        });

            function showContent(obj) {
                $("#foot-content").toggleClass("footer_withcontent", 1000, "swing", function () {
                    $("#content-icon").toggleClass("glyphicon-chevron-down", 1500, "swing");
                });
                var start = [now_x, now_y];
                //導引使用者到該地點
                var reqRecord = { group_id: obj.group_id, role_id:@Session[CDictionary.SK_ActiveRoleId] }
                var record = getGameRecord(reqRecord);
                    let url = 'https://api.mapbox.com/directions/v5/mapbox/walking/' + start[0] + ',' + start[1] + ';' + obj.end[0] + ',' + obj.end[1] + '?steps=false&geometries=geojson&access_token=' + mapboxgl.accessToken;
                    var req = new XMLHttpRequest();

                    req.open('GET', url, true);
                req.onload = function () {
                        var json = JSON.parse(req.response);
                        var data = json.routes[0];
                        var route = data.geometry.coordinates;
                        var distance = data.distance;
                        var duration = data.duration;

                    $("#distance").html("目標距離: " + (distance / 1000).toFixed(1) + "公里");
                    $("#distance").attr("value", distance);

                    $("#duration").html("步行時間: " + (duration / 60).toFixed(1) + "分鐘");
                    $("#duration").attr("value", duration);

                    $("#group_title").html(obj.group_name);
                    $("#group_descript").html(obj.descript);
                    $("#group_points").html("一共" + obj.count + "點");
                    $("#game_photo").attr("src",obj.photo);

                    $("#play_count").html("您已遊玩過" + record.fRecords_GameNav.fFinished_GameRecord + "次");
                    $("#play_status").html("目前進度: 第" + record.fStatus_GameNav + "點");

                    $("#play_group").attr("name", obj.group_name);
                    $("#play_group").attr("value", obj.group_id);
                    $("#enter_game").attr("href", "javascript:beginGame()")
                    //$("#inner_content").html(content);

                        var geojson = {
                        type: 'Feature',
                        properties: {},
                        geometry: {
                        type: 'LineString',
                            coordinates: route
                        }
                    };

                    // if the route already exists on the map, reset it using setData
                    if (map.getSource('route')) {
                        map.getSource('route').setData(geojson);
                        map.setLayoutProperty('route', 'visibility', 'visible');

                } else { // otherwise, make a new request
                    map.addLayer({
                    id: 'route',
                            type: 'line',
                            source: {
                        type: 'geojson',
                                data: {
                            type: 'Feature',
                                    properties: {},
                                    geometry: {
                                type: 'LineString',
                                        coordinates: geojson
                                    }
                            }
                        },
                            layout: {
                            'line-join': 'round',
                                'line-cap': 'round'
                            },
                            paint: {
                            'line-color': '#3887be',
                                'line-width': 5,
                                'line-opacity': 0.75
                            }
                    });
                        map.getSource('route').setData(geojson);
                        map.setLayoutProperty('route', 'visibility', 'visible');

                }
                    // add turn instructions here at the end
                };
                req.send();
            };
                //開始遊戲
        function beginGame() {
            var obj = {
                value: $("#play_group").attr("value"),
                name: $("#play_group").attr("name")
            };
            showGameItems(obj.value);
            map.setLayoutProperty('game_group', 'visibility', 'none');
            var userPosition = [now_x, now_y];
            var toRecordObj = {
                group_id: obj.value,
                role_id: @Session[CDictionary.SK_ActiveRoleId], //記得改成Session的role_id
            };

                var response = getGameRecord(toRecordObj)

            var order = response.fStatus_GameNav;
                var game_id = response.fItems_GameNav[order].fId_Game;
                var end = [response.fItems_GameNav[order].fX_Coordinate, response.fItems_GameNav[order].fY_Coordinate];
            var name = response.fItems_GameNav[order].fName_Game;
            var type = response.fItems_GameNav[order].fType_Game;

                var toGuideObj = {
                    game_id: game_id,
                    end: end,
                    name: name,
                    type: type
                };

            guideRoute(toGuideObj);
            $(".detail").html("");
            $("#group_title").html(obj.name);
            $("#play_game").attr("value", obj.value);
            $("#play_game").attr("name", obj.name);
            $("#enter_game").attr("href", "javascript:enterGame()");
            $("#info_icon").hide();
            if (type == 1) {
                $("#game_photo").attr("src", "https://i.imgur.com/nVErj8m.png");
            } else if (type == 2) {
                $("#game_photo").attr("src", "https://cdn.onlinewebfonts.com/svg/img_465662.png");
            }
        };

                //遊戲進行導引路線
        function guideRoute(obj) {
                    //導引下個地點
                    var start = [now_x, now_y];

                    let url = 'https://api.mapbox.com/directions/v5/mapbox/walking/' + start[0] + ',' + start[1] + ';' + obj.end[0] + ',' + obj.end[1] + '?steps=false&geometries=geojson&access_token=' + mapboxgl.accessToken;
                    var req = new XMLHttpRequest();

                    req.open('GET', url, true);
                    req.onload = function () {
                        var json = JSON.parse(req.response);
                        var data = json.routes[0];
                        var route = data.geometry.coordinates;
                        var distance = data.distance;
                        var duration = data.duration;
                        console.log(json);

                        //var content = "<div id='distance' value='" + distance + "'>您與該點距離: " + (distance / 1000).toFixed(1) + "公里</div>";
                        //content += "<div id='duration' value'" + duration + "'>步行時間: " + (duration / 60).toFixed(1) + "分鐘</div><br>";
                        //content += obj.end;
                        //content += "<br>" + obj.name + "<br>";
                        ////content += "<img src='" + photo + "' / >";
                        //content += "<button value='" + obj.game_id + "' onclick='enterGame(this)'> 進入 </button>";

                        $("#distance").html("目標距離: " + (distance / 1000).toFixed(1) + "公里");
                        $("#distance").attr("value", distance);

                        $("#duration").html("步行時間: " + (duration / 60).toFixed(1) + "分鐘");
                        $("#duration").attr("value", duration);

                        $("#group_title").html(obj.name);
                        $("#play_game").attr("value", obj.game_id);
                        $("#play_game").attr("name", obj.name);

                        if (obj.type == 1) {
                            $("#game_photo").attr("src", "https://i.imgur.com/nVErj8m.png");
                        } else if (obj.type == 2) {
                            $("#game_photo").attr("src", "https://cdn.onlinewebfonts.com/svg/img_465662.png");
                        };

                        var geojson = {
                            type: 'Feature',
                            properties: {},
                            geometry: {
                                type: 'LineString',
                                coordinates: route
                            }
                        };

                // if the route already exists on the map, reset it using setData
                if (map.getSource('route')) {
                    map.getSource('route').setData(geojson);
                } else { // otherwise, make a new request
                    map.addLayer({
                    id: 'route',
                        type: 'line',
                        source: {
                        type: 'geojson',
                            data: {
                            type: 'Feature',
                                properties: {},
                                geometry: {
                                type: 'LineString',
                                    coordinates: geojson
                                }
                            }
                        },
                        layout: {
                            'line-join': 'round',
                            'line-cap': 'round'
                        },
                        paint: {
                            'line-color': '#3887be',
                            'line-width': 5,
                            'line-opacity': 0.75
                        }
                    });
                    map.getSource('route').setData(geojson);

                }
                // add turn instructions here at the end
            };
                    req.send();
            map.setLayoutProperty('route', 'visibility', 'visible');
            targetEnd = [obj.end[0], obj.end[1]];
            trackToRefresh = true;
        };


        //更新導航路線每3秒
        function routeFresh(obj) {

            let url = 'https://api.mapbox.com/directions/v5/mapbox/walking/' + obj.start[0] + ',' + obj.start[1] + ';' + obj.end[0] + ',' + obj.end[1] + '?steps=false&geometries=geojson&access_token=' + mapboxgl.accessToken;
            var req = new XMLHttpRequest();

            req.open('GET', url, true);
            req.onload = function () {
                var json = JSON.parse(req.response);
                var data = json.routes[0];
                var route = data.geometry.coordinates;
                var distance = data.distance;
                var duration = data.duration;

                $("#distance").attr("value",distance);
                $("#distance").html("目標距離: " + (distance / 1000).toFixed(1) + "公里");
                $("#duration").attr("value",duration);
                $("#duration").html("步行時間: " + (duration / 60).toFixed(1) + "分鐘");

                var geojson = {
                    type: 'Feature',
                    properties: {},
                    geometry: {
                        type: 'LineString',
                        coordinates: route
                    }
                };

                // if the route already exists on the map, reset it using setData
                if (map.getSource('route')) {
                    map.getSource('route').setData(geojson);

                } else { // otherwise, make a new request
                    map.addLayer({
                        id: 'route',
                        type: 'line',
                        source: {
                            type: 'geojson',
                            data: {
                                type: 'Feature',
                                properties: {},
                                geometry: {
                                    type: 'LineString',
                                    coordinates: geojson
                                }
                            }
                        },
                        layout: {
                            'line-join': 'round',
                            'line-cap': 'round'
                        },
                        paint: {
                            'line-color': '#3887be',
                            'line-width': 5,
                            'line-opacity': 0.75
                        }
                    });
                    map.getSource('route').setData(geojson);

                }
                // add turn instructions here at the end
            };
            req.send();
        }

        //=======進入遊戲=====================
        function enterGame() {

                    var role_id = @Session[CDictionary.SK_ActiveRoleId];
                    var group_id = $("#play_group").attr("value");
                    var toRecordObj = {
                        group_id: group_id,
                        role_id: @Session[CDictionary.SK_ActiveRoleId],
                    };

            var distance = $("#distance").attr("value");

            //判斷使用者距離是否靠近
            if (distance > trigger_distance) {
                    Swal.fire({
                    title: "尚未到達目的地",
                    showClass: {
                        popup: 'animate__animated animate__fadeInDown'
                    },
                    hideClass: {
                        popup: 'animate__animated animate__fadeOutUp'
                    }
                    });
                } else {

                    var response = getGameRecord(toRecordObj);
                    var order = response.fStatus_GameNav;
                    var game_id = response.fItems_GameNav[order].fId_Game;
                    var end = [response.fItems_GameNav[order].fX_Coordinate, response.fItems_GameNav[order].fY_Coordinate];
                    var img = response.fItems_GameNav[order].fSource_Game;


                    //判斷是否為AR
                    if (response.fItems_GameNav[order].fAR_Game == 1) {
                        ARwindow = window.open("../Game/AR", null);
                    }//判斷為踩點或是QA
                    else if (response.fItems_GameNav[order].fType_Game == 1) { //
                        fireSteps(response);
                    } else if (response.fItems_GameNav[order].fType_Game == 2) {
                        fireQA(response);
                    }
                }
        };

        function finishItem(now_play) {
            //得到目前遊玩的group
            var now_play_group = $("#play_group").attr("value");
            var now_play_group_name = $("#play_group").attr("name");
            var next_play = now_play;
            //更新資料
            var response = $.ajax({
                url: "@Url.Action("put","Game")",
                async: false,
                type: "POST",
                dataType: "json",
                data: {
                    group_id: now_play_group,
                    role_id:@Session[CDictionary.SK_ActiveRoleId],
                    finish: now_play
                }
            }).done(function (response) {
                console.log(response)
            }).fail(function (xhr) {
                console.log(xhr.status + xhr.responseText);
            }).responseJSON;

            //完成遊戲項目
            if (response.fIsPass_GameNav != 1) {
                var nextGame = response.fItems_GameNav[next_play].fId_Game;
                var nextPoint = [response.fItems_GameNav[next_play].fX_Coordinate, response.fItems_GameNav[next_play].fY_Coordinate];
                var nextName = response.fItems_GameNav[next_play].fName_Game;
                var nextType = response.fItems_GameNav[next_play].fType_Game;
                //導去下一個點
                var toGuideObj = {
                    game_id: nextGame,
                    end: nextPoint,
                    name: nextName,
                    type: nextType
                };
                showGameItems(now_play_group);
                guideRoute(toGuideObj);
            } else {//完成一組遊戲

                Swal.fire(
                    '完成遊戲!',
                    '恭喜你完成' + now_play_group_name,
                    'success'
                );
                exitGame();
            }



        };


        function exitGame() {
            map.setLayoutProperty('game_group', 'visibility', 'visible');
            map.setLayoutProperty('game_items', 'visibility', 'none');
            map.setLayoutProperty('route', 'visibility', 'none');
            $("#play_group").attr("value", "-1");
            $("#play_group").attr("name", "group_name");
            $("#group_title").html("");
            $("#game_photo").attr("src", "");
            $("#enter_game").attr("href", "");
            $(".detail").html("");
            trackToRefresh = true;
            $("#info_icon").show();


                };


        function getGameGroup() {
                    return $.ajax({
                    url: "@Url.Action("get","Game")",
                async: false,
                type: "GET",
                dataType: "json",
            }).done(function (response) {
                }).fail(function (xhr) {
                    console.log(xhr.status + xhr.responseText);
                }).responseJSON;
        };

        function getGameRecord(obj) {
                    return $.ajax({
                    url: "@Url.Action("post","Game")",
                async: false,
                type: "POST",
                dataType: "json",
                data: { group_id: obj.group_id, role_id: obj.role_id }
                    }).done(function (response) {
                }).fail(function (xhr) {
                    console.log(xhr.status + xhr.responseText);
                }).responseJSON;
        };

        function fireSteps(response) {
            var order = response.fStatus_GameNav;
            var title = response.fItems_GameNav[order].cGamesteps.fTitle_GameStep;
            var content = response.fItems_GameNav[order].cGamesteps.fContent_GameStep;
            var game_id = response.fItems_GameNav[order].fId_Game;
            var end = [response.fItems_GameNav[order].fX_Coordinate, response.fItems_GameNav[order].fY_Coordinate];
            var img = response.fItems_GameNav[order].fSource_Game;

            Swal.fire({
                title: title,
                text: content,
                imageUrl: img,
                imageWidth: 400,
                imageAlt: '踩點遊戲',
                showCancelButton: true,
                confirmButtonText: '確定',
                cancelButtonText: '取消',
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire(
                        '完成!',
                        '',
                        'success'
                    );
                    finishItem(response.fItems_GameNav[order].fOrder_Game);
                }
            });

        };
        async function fireQA(response) {
            var order = response.fStatus_GameNav;
            var game_id = response.fItems_GameNav[order].fId_Game;
            var end = [response.fItems_GameNav[order].fX_Coordinate, response.fItems_GameNav[order].fY_Coordinate];
            var img = response.fItems_GameNav[order].fSource_Game;

            var question = response.fItems_GameNav[order].cGameQA.fQuestion_GameQA;
            var op1 = response.fItems_GameNav[order].cGameQA.fOption_1_GameQA;
            var op2 = response.fItems_GameNav[order].cGameQA.fOption_2_GameQA;
            var op3 = response.fItems_GameNav[order].cGameQA.fOption_3_GameQA;
            var op4 = response.fItems_GameNav[order].cGameQA.fOption_4_GameQA;

                let inputOptions = new Promise((resolve) => {
                    setTimeout(() => {
                        resolve({
                            '1': op1,
                            '2': op2,
                            '3': op3,
                            '4': op4
                        })
                    }, 1000)
                });

                let { value: answer } = await Swal.fire({
                    title: question,
                    imageUrl: img,
                    imageWidth: 400,
                    text: '請選擇答案',
                    input: 'radio',
                    customClass: {
                        input: 'my-radio'
                    },
                    icon:'question',
                    confirmButtonText: '確定',
                    inputOptions: inputOptions,
                    inputValidator: (value) => {
                        if (!value) {
                            return '請選擇一個答案!'
                        }
                    },
                });

                if (answer) {
                    var toQA = {
                        role_id: @Session[CDictionary.SK_ActiveRoleId],
                        group_id: $("#now_play").attr("value"),
                        game_id: game_id,
                        answer: answer,
                        finish: response.fItems_GameNav[order].fOrder_Game
                    };

                    checkQA(toQA);
                };


        };

        function checkQA(toQA) {

            $.ajax({
                url: "@Url.Action("checkQA", "Game")",
                type: "GET",
                dataType: "json",
                data: {
                    role_id: toQA.role_id,
                    group_id: toQA.group_id,
                    game_id: toQA.game_id,
                    answer: toQA.answer
                }
            }).done(function (response) {
                console.log(response);
                if (response.fResult_CheckQA == 1) {
                    Swal.fire({
                        icon: 'success',
                        title: response.fMessage_CheckQA
                    });
                    finishItem(toQA.finish)
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: response.fMessage_CheckQA
                    })
                }
            }).fail(function (xhr) {
                console.log(xhr.status + xhr.responseText);
            });
        };

        function resetRecord(obj) {

            Swal.fire({
                title: obj.name,
                text: '確定要從頭開始嗎？',
                showCancelButton: true,
                confirmButtonText: '確定',
                cancelButtonText: '取消',

            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: "@Url.Action("delete","Game")",
                        async: false,
                        type: "POST",
                        dataType: "json",
                        data: { group_id: obj.value, role_id: role_id }
                    }).done(function (response) {
                        console.log(response);
                        $("#currentStatus").html("目前進度: 第" + response.fStatus_GameNav + "點");
                    }).fail(function (xhr) {
                        console.log(xhr.status + xhr.responseText);
                    })
                }
            });


        };

        function forDemo() {
            //$("#map").toggle();
            //loadARcontent();
            //$("#AR").toggle();
            Swal.fire({
                title: "Demo模式",
                text: '開啟之後將不限距離遊玩',
                showDenyButton: true,
                confirmButtonText: '開啟',
                denyButtonText: '關閉',
            }).then((result) => {
                if (result.isConfirmed) {
                    trigger_distance = 100000000;
                } else if (result.isDenied) {
                    trigger_distance = 100;
                }
            });
        }

        function noteToUser(message) {

            hub.server.notes(-1, message);

            };

        var hub = $.connection.myHub;
        $.connection.hub.start().done();

        hub.client.notes = function (role, message) {
            if (role === -1) {
                console.log(message);

                var response = $.ajax({
                    url: "@Url.Action("post","Note")",
                    type: "POST",
                    async: false,
                    data: { role_id: role_id, message: message, admin_id: 25 },
                    dataType: "json"
                }).done(function (response) {
                }).responseJSON;

                console.log(response);

                Swal.fire({
                    position: 'center-end',
                    title: '通知!',
                    width: '10%',
                    text: response.fMessage_Note,
                    backdrop: 'rgba(0, 0, 0, 0)',
                    showConfirmButton: false,
                    timer: 1500
                });
            } else if (role === role_id) {

                var response = $.ajax({
                    url: "@Url.Action("post","Note")",
                    type: "POST",
                    async: false,
                    data: { role_id: role_id, message: message, admin_id: 25 },
                    dataType: "json"
                }).done(function (response) {
                }).responseJSON;

                console.log(response);

                Swal.fire({
                    position: 'center-end',
                    title: '通知!',
                    width: '10%',
                    text: response.fMessage_Note,
                    backdrop: 'rgba(0, 0, 0, 0)',
                    showConfirmButton: false,
                    timer: 1500
                });
            };
        };



    </script>

</body>
</html>