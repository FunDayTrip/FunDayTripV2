@using homepage.ViewModel
@using homepage.Models
@model homepage.ViewModel.CGameNavigationViewModel
@if (Session[CDictionary.SK_ActiveRoleId] == null)
{
    Session[CDictionary.SK_ActiveRoleId] = 3;
}
<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    @*a-frame and ar.js*@
    <script src="https://aframe.io/releases/1.0.4/aframe.min.js"></script>
    <script src="https://unpkg.com/aframe-look-at-component@0.8.0/dist/aframe-look-at-component.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar-nft.js"></script>
    <script src="https://raw.githack.com/donmccurdy/aframe-extras/master/dist/aframe-extras.loaders.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <script src="https://raw.githack.com/fcor/arjs-gestures/master/dist/gestures.js"></script>
    @*sweet alert cdn _verna_0930*@
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

    <link href="~/css/Game.css" rel="stylesheet" />
    <script src="~/js/gesture-handler.js"></script>
    <script src="~/js/gesture-detector.js"></script>

    <style>
        .buttons {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 6em;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10;
        }

        .active-button {
            padding: 0.25em;
            border-radius: 50%;
            border: 5px black;
            background: white;
            color: black;
            width: 5em;
            height: 5em;
            font-size:16px;
            font-weight:bold;
        }

        .in-buttons {
            position: absolute;
            top: 5px;
            right: -5px;
            width: 100%;
            height: 2em;
            display: flex;
            justify-content: end;
            align-items: center;
            z-index: 10;
        }
        .info-button {
            padding: 0.25em;
            border-radius: 50%;
            border: 5px black;
            background: #2263c8;
            color: white;
            width: 2em;
            height: 2em;
        }

    </style>

</head>

<body style="margin: 0; overflow: hidden;">
    <div class="in-buttons">
        <button id="info-button" class="info-button" onclick="showInfo()">?</button>
    </div>

    <a-scene arjs
             embedded
             renderer="logarithmicDepthBuffer: true;"
             vr-mode-ui="enabled: false"
             gesture-detector
             id="scene">
        <a-assets>
            <a-asset-item id="game_item"
                          src="@Model.fItems_GameNav[Model.fStatus_GameNav].fSource_Game">
            </a-asset-item>
        </a-assets>

        <a-marker preset="hiro"
                  raycaster="objects: .clickable"
                  emitevents="true"
                  cursor="fuse: false; rayOrigin: mouse;"
                  id="markerA">
            <a-entity id="bowser-model"
                      gltf-model="#game_item"
                      position="0 0 0"
                      scale="1 1 1"
                      class="clickable"
                      gesture-handler>
            </a-entity>
        </a-marker>
        <a-entity light="color: #FFF; intensity: 2" position="1 1 1"></a-entity>

        <a-entity camera></a-entity>
    </a-scene>

    <div class="buttons">
        <button id="active-button" class="active-button" onclick="goGame()">Go</button>
    </div>

    <script>
        const order = @Model.fStatus_GameNav;
        const ARitem = @Html.Raw(Json.Encode(Model));
        const group_id = @Model.fGroup_GameNav.fId_GameGroup;
        const now_play = ARitem.fItems_GameNav[order].fOrder_Game;

        function goGame() {
            if (ARitem.fItems_GameNav[order].fType_Game == 1) { //
                fireSteps(ARitem);
            } else if (ARitem.fItems_GameNav[order].fType_Game == 2) {
                fireQA(ARitem);
            }
        };

        function showInfo() {
            Swal.fire({
                title: '請找尋並掃描圖片',
                imageUrl: 'https://killcloud.nyc3.digitaloceanspaces.com/assets/Hiro_marker_ARjs.png',
                imageWidth: 400,
                imageAlt: '掃描圖片',
                confirmButtonText: '確定'                
            })
        };

        function fireSteps(ARitem) {

            var title = ARitem.fItems_GameNav[order].cGamesteps.fTitle_GameStep;
            var content = ARitem.fItems_GameNav[order].cGamesteps.fContent_GameStep;
            var game_id = ARitem.fItems_GameNav[order].fId_Game;
            var end = [ARitem.fItems_GameNav[order].fX_Coordinate, ARitem.fItems_GameNav[order].fY_Coordinate];

            Swal.fire({
                title: title,
                text: content,
                imageAlt: '踩點遊戲',
                showCancelButton: true,
                confirmButtonText: '確定',
                cancelButtonText: '取消',

            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        icon: 'success',
                        title: '完成!',
                        didDestroy: () => {
                            finishItem(now_play);
                        }
                    })
                }
            });

        };

        async function fireQA(ARitem) {
            var game_id = ARitem.fItems_GameNav[order].fId_Game;
            var end = [ARitem.fItems_GameNav[order].fX_Coordinate, ARitem.fItems_GameNav[order].fY_Coordinate];

                        var question = ARitem.fItems_GameNav[order].cGameQA.fQuestion_GameQA;
                        var op1 = ARitem.fItems_GameNav[order].cGameQA.fOption_1_GameQA;
                        var op2 = ARitem.fItems_GameNav[order].cGameQA.fOption_2_GameQA;
                        var op3 = ARitem.fItems_GameNav[order].cGameQA.fOption_3_GameQA;
                        var op4 = ARitem.fItems_GameNav[order].cGameQA.fOption_4_GameQA;

                        let inputOptions = new Promise((resolve) => {
                        setTimeout(() => {
                        resolve({
                            '1': op1,
                            '2': op2,
                            '3': op3,
                            '4': op4
                        })
                    }, 1000)
                });

        let { value: answer } = await Swal.fire({
            title: question,
            text: '請選擇答案',
            input: 'radio',
            customClass: {
                input: 'my-radio'
            },
            confirmButtonText: '確定',
            inputOptions: inputOptions,
            inputValidator: (value) => {
                if (!value) {
                    return '請選擇一個答案!'
                }
            },
        });

        if (answer) {
            var toQA = {
                role_id: @Session[CDictionary.SK_ActiveRoleId],
                group_id: group_id,
                game_id: game_id,
                answer: answer,
                finish: now_play,
                    };

        checkQA(toQA);
            };
        };

        function checkQA(toQA) {

            $.ajax({
                url: "@Url.Action("checkQA", "Game")",
                type: "GET",
                dataType: "json",
                data: {
                    role_id: toQA.role_id,
                    group_id: toQA.group_id,
                    game_id: toQA.game_id,
                    answer: toQA.answer
                }
            }).done(function (response) {
                console.log(response);
                if (response.fResult_CheckQA == 1) {
                    Swal.fire({
                        icon: 'success',
                        title: response.fMessage_CheckQA,
                        didDestroy: () => {
                            finishItem(now_play)
                        },
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: response.fMessage_CheckQA
                    })
                }
            }).fail(function (xhr) {
                console.log(xhr.status + xhr.responseText);
            });
        };



        function finishItem(now_play) {
            //let timerInterval;
            //Swal.fire({
            //    title: '完成!',
            //    html: '此視窗將於 <b></b> 秒後關閉.',
            //    timer: 3,
            //    timerProgressBar: true,
            //    willOpen: () => {
            //        Swal.showLoading()
            //        timerInterval = setInterval(() => {
            //            const content = Swal.getContent()
            //            if (content) {
            //                const b = content.querySelector('b')
            //                if (b) {
            //                    b.textContent = Swal.getTimerLeft()
            //                }
            //            }
            //        }, 1000)
            //    },
            //    willClose: () => {
            //        clearInterval(timerInterval)
            //    }
            //}).then((result) => {
            //    /* Read more about handling dismissals below */
            //    if (result.dismiss === Swal.DismissReason.timer) {
            //        console.log('I was closed by the timer')
            //    }
            //})
            window.opener.finishItem(now_play);
            window.close();
        }


    </script>

</body>
</html>
